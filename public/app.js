angular.module("LMSApp",["ui.router"]).config(["$stateProvider","$urlRouterProvider","$locationProvider",function(t,e,r){e.otherwise("/login"),t.state("login",{url:"/login",templateUrl:"src/login/login.html"}).state("signup",{url:"/signup",templateUrl:"src/signup/signup.html"}).state("overview",{url:"/overview",templateUrl:"src/login/overview.html"}).state("courses",{url:"/courses",templateUrl:"src/course/courses.html"}).state("quizes",{url:"/quizes",templateUrl:"src/quiz/quizes.html"}).state("profile",{url:"/profile",templateUrl:"src/profile/profile.html"}),r.html5Mode(!0)}]).run(["$rootScope",function(t){t.$on("$stateChangeStart",function(e,r,o){r.requireLogin&&"undefined"==typeof t.currentUser&&(e.preventDefault(),$state.go("login"))})}]),angular.module("LMSApp").controller("CourseController",["$scope","courseService","userService",function(t,e,r){t.newCourse={title:"",department:"",number:"",instructor:""},t.addCourse=function(){console.log(t.newCourse)};var o=function(){e.fetch(function(e){r.getInstructors(function(r){t.instructors=r;var o=e.map(function(t){for(var e=0;e<r.length;e++)r[e]._id===t.instructorId&&(t.instructorName=r[e].lastname);return t});t.courses=o})})};o()}]),angular.module("LMSApp").factory("courseService",["$http",function(t){var e="http://127.0.0.1:3000/api/course",r=function(r){t.get(e).then(function(t){return r(t.data.data)},function(t){console.log(t)})};return{fetch:r}}]),angular.module("LMSApp").controller("LoginController",["$scope","$state","userService",function(t,e,r){t.emailPattern=/^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i,t.user={},t.login=function(){r.login(t.user,function(t){t.type===!0&&(r.setUser=t.user,e.go("courses"))})},t.validate=function(){console.log("hello"),$location.path("/")}}]),angular.module("LMSApp").factory("userService",["$http",function(t){var e="http://127.0.0.1:3000/api/",r=e+"user/",o=e+"login",n=e+"instructors",u="",i=!1,l="",a=function(e,o){var n={data:e};t.post(r,n).then(function(t){return u=t.data.data,i=!0,o(t.data.data)},function(t){console.log(t.data.data)})},s=function(e,r){var n={data:e};t.post(o,n).then(function(t){return r(t.data.data)},function(t){console.log(t)})},c=function(t){u=t,i=!0,l=t.role},f=function(){return u},p=function(e){t.get(n).then(function(t){return e(t.data.data)},function(t){console.log(t)})},g=function(){u="",i=!1,l=""};return{getInstructors:p,createUser:a,setCurrentUser:c,login:s,logout:g,role:l,getCurrentUser:f}}]),angular.module("LMSApp").controller("SignupController",["$scope","userService","courseService",function(t,e,r){t.emailPattern=/^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i,t.roles=["student","instructor"],t.newUser={firstname:"",lastname:"",email:"",password:"",role:""},t.submit=function(){e.createUser(t.newUser,function(t){console.log(t)})}}]);
//# sourceMappingURL=data:application/json;base64,
