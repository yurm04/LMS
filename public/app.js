angular.module("LMSApp",["ui.router"]).config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,o){t.otherwise("/login"),e.state("login",{url:"/login",templateUrl:"src/login/login.html"}).state("signup",{url:"/signup",templateUrl:"src/signup/signup.html"}).state("overview",{url:"/overview",templateUrl:"src/login/overview.html"}).state("courses",{url:"/courses",templateUrl:"src/course/courses.html"}).state("quizes",{url:"/quizes",templateUrl:"src/quiz/quizes.html"}).state("profile",{url:"/profile",templateUrl:"src/profile/profile.html"}),o.html5Mode(!0)}]).run(["$rootScope",function(e){e.$on("$stateChangeStart",function(t,o,r){o.requireLogin&&"undefined"==typeof e.currentUser&&(t.preventDefault(),$state.go("login"))})}]),angular.module("LMSApp").controller("CourseController",["$scope","courseService","userService",function(e,t,o){e.newCourse={title:"",department:"",number:"",instructor:""},e.addCourse=function(){console.log(e.newCourse)};var r=function(){t.fetch(function(t){o.getInstructors(function(o){e.instructors=o;var r=t.map(function(e){for(var t=0;t<o.length;t++)o[t]._id===e.instructorId&&(e.instructorName=o[t].lastname);return e});e.courses=r})})};r()}]),angular.module("LMSApp").factory("courseService",["$http",function(e){var t="http://127.0.0.1:3000/api/course",o=function(o){e.get(t).then(function(e){return o(e.data.data)},function(e){console.log(e)})};return{fetch:o}}]),angular.module("LMSApp").controller("LoginController",["$scope","$state","userService",function(e,t,o){e.emailPattern=/^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i,e.user={},e.login=function(){o.login(e.user,function(e){console.log(e),e.type===!0&&(console.log(e),o.setUser=e.user,t.go("courses"))})},e.validate=function(){console.log("hello"),$location.path("/")}}]),angular.module("LMSApp").factory("userService",["$http",function(e){var t="http://127.0.0.1:3000/api/",o=t+"user/",r=t+"login",n=t+"instructors",u="",l=!1,i="",a=function(t,r){var n={data:t};e.post(o,n).then(function(e){return u=e.data.data,l=!0,r(e.data.data)},function(e){console.log(e.data.data)})},s=function(t,o){var n={data:t};console.log(n),e.post(r,n).then(function(e){return o(e.data.data)},function(e){console.log(e)})},c=function(e){u=e,l=!0,i=e.role},f=function(){return u},p=function(t){e.get(n).then(function(e){return t(e.data.data)},function(e){console.log(e)})},g=function(){u="",l=!1,i=""};return{getInstructors:p,createUser:a,setCurrentUser:c,login:s,logout:g,role:i,getCurrentUser:f}}]),angular.module("LMSApp").controller("SignupController",["$scope","userService","courseService",function(e,t,o){e.emailPattern=/^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i,e.roles=["student","instructor"],e.newUser={firstname:"",lastname:"",email:"",password:"",role:""},e.submit=function(){t.createUser(e.newUser,function(e){console.log(e)})}}]);
//# sourceMappingURL=data:application/json;base64,
